apiVersion: v1
kind: ConfigMap
metadata:
  name: node-script
  namespace: kube-system
data:
  entrypoint.sh: |-
    #!/bin/sh
    apk add jq curl util-linux
    for i in $NODES; do
      [ $(hostname -i) = $i ] && continue
      t=$(ping -qc 4 -w 5 $i | grep avg | cut -f 4 -d /)
      if [ ! $t ]; then
        t=fail
      fi
      echo PF:PING:$(hostname -i):$i:$t
      for p in $(seq $START_PORT $END_PORT); do
        echo $(hostname -i):TCP | nc -w 1 $i $p
      done
      echo $(hostname -i):UDP | nc -uw 1 $i $(echo $START_PORT+1 | bc)
    done
    for i in $TCP_CHECKS; do
      echo $i | while IFS=: read h p; do
        nc -w 1 $h $p </dev/null >/dev/null
        echo PF:TCP:$(hostname -i):$h:$p:$?
      done
    done
    for i in $(seq 1 5); do
      t=$(nc -w 1 time.nist.gov 13 | tail -1 | cut -f 2,3 -d " ")
      [ "$t" ] && break
    done
    echo PF:SWAP:$(hostname -i):$(tail +2 /proc/swaps | wc -l)
    echo PF:CPU:$(hostname -i):$(grep -c processor /proc/cpuinfo)
    echo PF:RAM:$(hostname -i):$(free -m | awk '/Mem/{print$2}')
    echo PF:VAR:$(hostname -i):$(df -m /host-var/lib | tail -1 | awk '{print$4}')
    echo PF:OPT:$(hostname -i):$(df -m /host-opt | tail -1 | awk '{print$4}')
    echo PF:KERNEL:$(hostname -i):$(uname -r)
    echo PF:DOCKER:$(hostname -i):$(curl -s --unix-socket /var/run/docker.sock http://dummy/version | jq -r .Version)
    echo PF:TIMESKEW:$(hostname -i):$(echo $(date +%s)-$(date +%s -d "20$t") | bc)
    lsblk -dnsb -o NAME,SIZE,TYPE,MOUNTPOINT | while read n s t m; do
      [ $m ] && continue
      s=$(echo $s/1073741824 | bc)
      [ $s -ge 8 ] && echo PF:BLK:$(hostname -i):$n:$s:$t
    done
    touch /ready
    sleep 1d
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: node
  namespace: kube-system
  labels:
    name: node
spec:
  selector:
    matchLabels:
      name: node
  minReadySeconds: 0
  template:
    metadata:
      labels:
        name: node
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: px/enabled
                operator: NotIn
                values:
                - "false"
              - key: node-role.kubernetes.io/master
                operator: DoesNotExist
      hostNetwork: true
      terminationGracePeriodSeconds: 0
      volumes:
      - name: node-script
        configMap:
          defaultMode: 0700
          name: node-script
      - name: host-var
        hostPath:
          path: /var
          type: Directory
      - name: host-opt
        hostPath:
          path: /opt
          type: Directory
      - name: docker-sock
        hostPath:
          path: /var/run/docker.sock
          type: Socket
      containers:
        - name: node
          image: alpine:3.10.3
          command:
          - /entrypoint.sh
          readinessProbe:
            exec:
              command:
              - cat
              - /ready
          volumeMounts:
          - name: node-script
            mountPath: /entrypoint.sh
            readOnly: true
            subPath: entrypoint.sh
          - name: host-var
            mountPath: /host-var
          - name: host-opt
            mountPath: /host-opt
          - name: docker-sock
            mountPath: /var/run/docker.sock
          env:
            - name: START_PORT
              valueFrom:
                configMapKeyRef:
                  name: preflight-config
                  key: start_port
            - name: END_PORT
              valueFrom:
                configMapKeyRef:
                  name: preflight-config
                  key: end_port
            - name: NODES
              valueFrom:
                configMapKeyRef:
                  name: preflight-config
                  key: nodes
            - name: TCP_CHECKS
              valueFrom:
                configMapKeyRef:
                  name: preflight-config
                  key: tcp_checks
