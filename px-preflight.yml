apiVersion: v1
kind: Namespace
metadata:
  name: px-preflight
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: px-preflight-sa
  namespace: px-preflight
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: px-preflight-role
  namespace: px-preflight
rules:
  - apiGroups: [""]
    resources:
      - pods
    verbs:
      - get
      - list
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: px-preflight-rb
  namespace: px-preflight
subjects:
  - kind: ServiceAccount
    name: px-preflight-sa
roleRef:
  kind: Role
  name: px-preflight-role
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: px-preflight-cr
rules:
- apiGroups: [""]
  resources:
  - nodes
  verbs:
  - get
  - list
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: px-preflight-crb
subjects:
- kind: ServiceAccount
  name: px-preflight-sa
  namespace: px-preflight
roleRef:
  kind: ClusterRole
  name: px-preflight-cr
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: px-preflight
spec:
  selector:
    matchLabels:
      app: postgres
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  replicas: 1
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: px-preflight
        imagePullPolicy: "Never"
        ports:
        - containerPort: 5432
        command:
        - "su"
        - "-"
        - "postgres"
        - "-c"
        - "/usr/lib/postgresql/12/bin/postgres -c config_file=/etc/postgresql/12/main/postgresql.conf -h '*'"
        readinessProbe:
          exec:
            command: ["psql", "-U", "postgres", "-c", "SELECT 1"]
          initialDelaySeconds: 1
          timeoutSeconds: 2
          periodSeconds: 5
        livenessProbe:
          exec:
            command: ["psql", "-U", "postgres", "-c", "SELECT 1"]
          initialDelaySeconds: 1
          timeoutSeconds: 2
          periodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: px-preflight
spec:
  selector:
    app: postgres
  ports:
    - protocol: TCP
      port: 5432
      targetPort: 5432
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: files
  namespace: px-preflight
data:
  nginx-conf: |-
    server {
            listen 9001 default_server;
            listen 9002 default_server;
            listen 9003 default_server;
            listen 9004 default_server;
            listen 9005 default_server;
            listen 9006 default_server;
            listen 9007 default_server;
            listen 9008 default_server;
            listen 9009 default_server;
            listen 9010 default_server;
            listen 9011 default_server;
            listen 9012 default_server;
            listen 9013 default_server;
            listen 9014 default_server;
            listen 9015 default_server;
            listen 9016 default_server;
            listen 9017 default_server;
            listen 9018 default_server;
            listen 9019 default_server;
            listen 9020 default_server;
            listen 9021 default_server;
            root /var/www/html;
            index index.html index.htm index.nginx-debian.html;
            server_name _;
            location / {
                    try_files $uri $uri/ =404;
            }
    }
  initdb.sh: |-
    export PGUSER=postgres
    export PGDATABASE=px-preflight
    export PGHOST=postgres.px-preflight.svc
    while ! createdb -EUTF8; do
      echo waiting for postgresql
      sleep 1
    done
    psql <<EOF
    CREATE TABLE nodes (
      id SERIAL PRIMARY KEY,
      ip TEXT UNIQUE NOT NULL,
      name TEXT UNIQUE NOT NULL,
      skew INTEGER,
      swap INTEGER,
      cores INTEGER,
      var_free INTEGER,
      opt_free INTEGER,
      kernel TEXT
    );
    CREATE TABLE etcd_nodes (
      id SERIAL PRIMARY KEY,
      ip TEXT NOT NULL,
      port INTEGER NOT NULL
    );
    CREATE TABLE latency (
      source_id INTEGER UNIQUE NOT NULL REFERENCES nodes (id),
      dest_id INTEGER UNIQUE NOT NULL REFERENCES nodes (id),
      time INTEGER NOT NULL
    );
    CREATE TABLE tcp (
      source_id INTEGER UNIQUE NOT NULL REFERENCES nodes (id),
      dest_id INTEGER UNIQUE NOT NULL REFERENCES nodes (id),
      open BOOLEAN NOT NULL,
      port INTEGER NOT NULL
    );
    CREATE TABLE udp (
      source_id INTEGER UNIQUE NOT NULL REFERENCES nodes (id),
      dest_id INTEGER UNIQUE NOT NULL REFERENCES nodes (id),
      open BOOLEAN NOT NULL,
      port INTEGER NOT NULL
    );
    CREATE TABLE etcd_conn (
      node_id INTEGER NOT NULL REFERENCES nodes (id),
      etcd_id INTEGER NOT NULL REFERENCES etcd_nodes (id),
      open BOOLEAN NOT NULL
    );
    CREATE TABLE disks (
      node_id INTEGER NOT NULL REFERENCES nodes (id),
      file TEXT NOT NULL,
      size INTEGER NOT NULL
    );
    CREATE UNIQUE INDEX latency_idx ON latency (source_id, dest_id);
    CREATE UNIQUE INDEX etcd_idx ON etcd_nodes (ip, port);
    CREATE UNIQUE INDEX tcp_idx ON tcp (source_id, dest_id, port);
    CREATE UNIQUE INDEX udp_idx ON udp (source_id, dest_id, port);
    CREATE UNIQUE INDEX disk_idx ON disks (node_id, file);
    EOF
  one.sh: |-
    export PGUSER=postgres
    export PGDATABASE=px-preflight
    export PGHOST=postgres.px-preflight.svc
    psql -c 'SELECT count(*) from nodes' >&/dev/null || exit 1
    ( echo "BEGIN;"
      kubectl get nodes -lnode-role.kubernetes.io/master!="",px/enabled!=false -o wide --no-headers | awk '{print$1,$6}' | while read name ip; do echo "INSERT INTO nodes (ip,name) VALUES ('$ip','$name');"; done
      echo "COMMIT;"
    ) | psql
    # FIXME wait for completion, output to configmap, delete namespace
  many.sh: |-
    n=$(psql -c 'SELECT count(*) from nodes') 2>/dev/null || exit 1
    [ $n = 0 ] && exit 1
    # FIXME populate etcd_nodes
    # FIXME test latency
    # FIXME test tcp
    # FIXME test udp
    # FIXME test etcd if external
    # FIXME list disks
    # FIXME test cloud creds
    sleep inf
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: nginx
  namespace: px-preflight
spec:
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      hostNetwork: true
      containers:
      - name: nginx
        image: px-preflight
        imagePullPolicy: "Never"
        command: [ "nginx", "-g", "daemon off;" ]
        volumeMounts:
        - name: nginx-conf
          mountPath: /etc/nginx/sites-available/default
          subPath: nginx-conf
        readinessProbe:
          httpGet:
            port: 9001
            path: /index.html
          initialDelaySeconds: 1
          periodSeconds: 5
          timeoutSeconds: 1
        livenessProbe:
          httpGet:
            port: 9001
            path: /index.html
          initialDelaySeconds: 1
          periodSeconds: 5
          timeoutSeconds: 1
      volumes:
      - name: nginx-conf
        configMap:
          name: files
---
apiVersion: batch/v1
kind: Job
metadata:
  name: initdb
  namespace: px-preflight
spec:
  template:
    metadata:
      name: initdb
      labels:
        app: initdb
    spec:
      containers:
      - name: initdb
        image: px-preflight
        imagePullPolicy: "Never"
        command: [ "/bin/sh", "/initdb.sh" ]
        volumeMounts:
        - name: initdb
          mountPath: /initdb.sh
          subPath: initdb.sh
      volumes:
      - name: initdb
        configMap:
          name: files
      restartPolicy: OnFailure
---
apiVersion: batch/v1
kind: Job
metadata:
  name: one
  namespace: px-preflight
spec:
  template:
    metadata:
      name: one
      labels:
        app: one
    spec:
      containers:
      - name: one
        image: px-preflight
        imagePullPolicy: "Never"
        command: [ "/bin/bash", "/one.sh" ]
        volumeMounts:
        - name: one
          mountPath: /one.sh
          subPath: one.sh
      volumes:
      - name: one
        configMap:
          name: files
      restartPolicy: OnFailure
      serviceAccountName: px-preflight-sa
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: px-preflight
  namespace: px-preflight
  labels:
    app: many
spec:
  selector:
    matchLabels:
      app: many
  minReadySeconds: 0
  template:
    metadata:
      labels:
        app: many
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: px/enabled
                operator: NotIn
                values:
                - "false"
              - key: node-role.kubernetes.io/master
                operator: DoesNotExist
      terminationGracePeriodSeconds: 0
      volumes:
      - name: many
        configMap:
          name: files
      containers:
        - name: many
          image: px-preflight
          imagePullPolicy: "Never"
          command: [ "/bin/bash", "/many.sh" ]
          volumeMounts:
          - name: many
            mountPath: /many.sh
            readOnly: true
            subPath: many.sh

