apiVersion: v1
kind: ConfigMap
metadata:
  name: preflight-job-script
  namespace: kube-system
data:
  entrypoint.sh: |-
    #!/bin/sh
    apk add perl >/dev/null
    perl <<\EOF
    use Term::ANSIColor qw(:constants);
    use warnings;
    use strict;
    print YELLOW."SUMMARY\n";
    print YELLOW."-------\n".RESET;
    my ($k8s_ver, %table, %ping, %tcp, %nc, %timeskew, %storagenode);
    open IN, "preflight";
    while(<IN>) {
      chomp;
      my @line = split ':', $_;
      my $label = shift @line;
      if ($label eq "K8S_VER") {
        $k8s_ver = shift @line;
        next;
      }
      my $host = shift @line;
      if ($label eq "BLK") {
        push @{$table{$host}{$label}}, \@line;
      } elsif ($label eq "PING") {
        my ($dest, $time) = @line;
        $ping{$host}{$dest} = $time;
      } elsif ($label eq "TCP") {
        my ($dest, $port, $n) = @line;
        $tcp{$host}{$dest}{$port} = $n;
      } elsif ($label eq "NC") {
        my ($port, $src, $proto) = @line;
        $nc{$host}{$port}{$src}{$proto}++;
      } elsif ($label eq "TIMESKEW") {
        my $n = pop @line;
        $timeskew{$host} = abs($n);
      } else {
        my $n = pop @line;
        $n =~ s/.x86_64// if ($label eq "KERNEL");
        $table{$host}{$label} = $n;
      }
    }
    close IN;
    my ($pingfail, $tcpfail, $ncfail, @timeskewfail, $fail) = 0;
    if (by_version($k8s_ver, $ENV{MIN_K8S}) < 0) {
      print RED;
      $fail++;
    } else {
      print GREEN;
    }
    print "Kubernetes is $k8s_ver (>=$ENV{MIN_K8S} required)\n \n".RESET;
    print "-" x 131 . "\n";
    printf "%-15s  %-5s  %-11s  %-23s  %-9s  %-8s  %-9s  %-9s  %s\n", "Node", "Cores", "Docker", "Kernel", "RAM", "Swap", "/var free", "/opt free",  "Block devices";
    print "-" x 131 . "\n";
    for my$n (split " ", $ENV{NODES}) {
      printf "%-15s  ", $n;
      if ($table{$n}{CPU} < $ENV{MIN_CORES}) {
        print RED;
        $fail++;
      } else {
        print GREEN;
      }
      printf "%-5s".RESET."  ", $table{$n}{CPU};
      if (by_version($table{$n}{DOCKER}, $ENV{MIN_DOCKER}) < 0) {
        print RED;
        $fail++;
      } else {
        print GREEN;
      }
      printf "%-11s", $table{$n}{DOCKER};
      print RESET."  ";
      if (by_version($table{$n}{KERNEL}, $ENV{MIN_KERNEL}) < 0) {
        print RED;
        $fail++;
      } else {
        print GREEN;
      }
      printf "%-23s".RESET."  ", $table{$n}{KERNEL};
      if ($table{$n}{RAM} < $ENV{MIN_RAM}) {
        print RED;
        $fail++;
      } else {
        print GREEN;
      }
      printf "%-9s".RESET."  ", "$table{$n}{RAM}MB";
      if ($table{$n}{SWAP}) {
        print RED."Enabled".RESET."  ";
        $fail++;
      } else {
        print GREEN."Disabled".RESET."  ";
      }
      my $min_var = $ENV{MIN_VAR};
      my $min_opt = $ENV{MIN_OPT};
      $min_var = $min_opt = $min_var + $min_opt if ($table{$n}{VAR} == $table{$n}{OPT});
      if ($table{$n}{VAR} < $min_var) {
        print RED;
        $fail++;
      } else {
        print GREEN;
      }
      printf "%-9s".RESET."  ", "$table{$n}{VAR}MB";
      if ($table{$n}{OPT} < $min_opt) {
        print RED;
        $fail++;
      } else {
        print GREEN;
      }
      printf "%-9s".RESET."  ", "$table{$n}{OPT}MB";
      print "\n" unless (defined${table}{$n}{BLK});
      foreach(0..$#{$table{$n}{BLK}}) {
        print " " x 107 if ($_);
        print "$table{$n}{BLK}->[$_]->[0] ($table{$n}{BLK}->[$_]->[1]GB) ($table{$n}{BLK}->[$_]->[2])\n";
        $storagenode{$n}++;
      }
    }
    print "-" x 131 . "\n";
    print "\n \n";
    print "Cores: >=$ENV{MIN_CORES} recommended\n";
    print "Docker: >=$ENV{MIN_DOCKER} required\n";
    print "Kernel: >=$ENV{MIN_KERNEL} required\n";
    print "RAM: >=$ENV{MIN_RAM}MB recommended\n";
    print "Swap must be disabled\n";
    print "/var must have $ENV{MIN_VAR}MB free\n";
    print "/opt must have $ENV{MIN_OPT}MB free (unless on same filesystem as /var)\n \n";
    if ($fail) {
      print RED."Some checks above failed\n \n".RESET;
    } else {
      print GREEN."All checks above passed\n \n".RESET;
    }
    foreach my$i (keys%ping) {
      foreach my$j (keys%{$ping{$i}}) {
        if ($ping{$i}{$j} < $ENV{MAX_PING}) {
          delete $ping{$i}{$j};
        } else {
          $pingfail++;
        }
      }
    }
    foreach my$i (keys%tcp) {
      foreach my$j (keys%{$tcp{$i}}) {
        foreach my$k (keys%{$tcp{$i}{$j}}) {
          if ($tcp{$i}{$j}{$k}) {
            print RED."Connection failed from $i to $j:$k\n".RESET;
            $tcpfail++;
          }
        }
      }
    }
    foreach my$i (keys%timeskew) {
      if ($timeskew{$i} > $ENV{MAX_TIMESKEW}) {
        push @timeskewfail, $i;
      }
    }
    if (scalar(keys%storagenode) > 2) {
      print GREEN.(scalar(keys%storagenode))." storage nodes found\n".RESET;
    } else {
      print RED.(scalar(keys%storagenode))." storage nodes found; must have >= 3 storage nodes\n".RESET;
      $fail++;
    }
    if ($pingfail) {
      print "Ping latency must be <$ENV{MAX_PING}ms:\n";
      foreach my$i (keys%ping) {
        foreach my$j (keys%{$ping{$i}}) {
          print RED."Ping latency from $i to $j is $ping{$i}{$j}ms\n".RESET;
        }
      }
    } else {
      print GREEN."Ping checks passed (maximum latency $ENV{MAX_PING}ms)\n\n".RESET;
    }
    print GREEN."All external TCP checks passed ($ENV{TCP_CHECKS})\n".RESET if (scalar(keys%tcp) && !$tcpfail);
    if (scalar@timeskewfail) {
      print RED."Some hosts have time skew >$ENV{MAX_TIMESKEW} seconds: ".(join',',@timeskewfail)."\n".RESET;
      $fail++;
    }
    for my$d (split " ", $ENV{NODES}) {
      for my$p ($ENV{START_PORT}..$ENV{END_PORT}) {
        for my$s (split " ", $ENV{NODES}) {
          next if ($s eq $d);
          unless($nc{$d}{$p}{$s}{TCP}) {
            print RED."Cannot connect from $s to $d:$p/tcp\n".RESET;
            $ncfail++;
          }
          if ($p == $ENV{START_PORT} + 1 && !defined$nc{$d}{$p}{$s}{UDP}) {
            print RED."Cannot connect from $s to $d:$p/udp\n".RESET;
            $ncfail++;
          }
        }
      }
    }
    print GREEN."All internal TCP checks passed\n \n".RESET unless($ncfail);
    if ($pingfail || $tcpfail || $ncfail || $fail) {
      print RED."Something failed - please fix and retry\n".RESET;
    } else {
      print GREEN."Success - please visit https://install.portworx.com/ to generate your spec\n".RESET;
    }

    sub by_version {
      my @a = split /\D/, $_[0];
      my @b = split /\D/, $_[1];
      $a[0] <=> $b[0] or $a[1] <=> $b[1] or $a[2] <=> $b[2];
    }
    EOF
---
apiVersion: batch/v1
kind: Job
metadata:
  name: preflight-job
  namespace: kube-system
spec:
  template:
    spec:
      terminationGracePeriodSeconds: 0
      hostNetwork: true
      volumes:
      - name: preflight-job-script
        configMap:
          defaultMode: 0700
          name: preflight-job-script
      - name: preflight-output
        configMap:
          name: preflight-output
      restartPolicy: Never
      containers:
      - name: preflight-job
        image: alpine:3.10.3
        command:
        - /entrypoint.sh
        volumeMounts:
        - name: preflight-job-script
          mountPath: /entrypoint.sh
          readOnly: true
          subPath: entrypoint.sh
        - name: preflight-output
          mountPath: /preflight
          readOnly: true
          subPath: preflight
        env:
          - name: START_PORT
            valueFrom:
              configMapKeyRef:
                name: preflight-config
                key: start_port
          - name: END_PORT
            valueFrom:
              configMapKeyRef:
                name: preflight-config
                key: end_port
          - name: NODES
            valueFrom:
              configMapKeyRef:
                name: preflight-config
                key: nodes
          - name: TCP_CHECKS
            valueFrom:
              configMapKeyRef:
                name: preflight-config
                key: tcp_checks
          - name: MIN_K8S
            valueFrom:
              configMapKeyRef:
                name: preflight-config
                key: min_k8s
          - name: MIN_CORES
            valueFrom:
              configMapKeyRef:
                name: preflight-config
                key: min_cores
          - name: MIN_DOCKER
            valueFrom:
              configMapKeyRef:
                name: preflight-config
                key: min_docker
          - name: MIN_KERNEL
            valueFrom:
              configMapKeyRef:
                name: preflight-config
                key: min_kernel
          - name: MIN_RAM
            valueFrom:
              configMapKeyRef:
                name: preflight-config
                key: min_ram
          - name: MIN_VAR
            valueFrom:
              configMapKeyRef:
                name: preflight-config
                key: min_var
          - name: MIN_OPT
            valueFrom:
              configMapKeyRef:
                name: preflight-config
                key: min_opt
          - name: MAX_PING
            valueFrom:
              configMapKeyRef:
                name: preflight-config
                key: max_ping
          - name: MAX_TIMESKEW
            valueFrom:
              configMapKeyRef:
                name: preflight-config
                key: max_timeskew
